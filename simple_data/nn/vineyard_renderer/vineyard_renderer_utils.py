# First-order simulator for plant growth in a vineyard.

import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

from scipy.misc import imread

from .constants import *

# If true, each plant has independent dissipation uniformly at random between 0
# and 1. Otherwise, dataset is generated by summing Gaussian areas of high
# dissipation rate.
potted_plants_mode = False

prefix = os.path.dirname(os.path.realpath(__file__))

# -----------------------------------------------------------------------------


# Takes a 2 x 200 matrix containing the positions of all plants in the field
# and generates a vector of soil moisture dissipation rates for each of the 200
# plants.
def soil_variation(dry_vines):
    res = np.ones(200)
    for i in range(len(dry_vines)):
        if not dry_vines[i]:
            l = np.random.randint(200 // len(dry_vines) - 8)
            r = np.random.randint(l + 8, 200 // len(dry_vines))
            for j in range(l, r + 1):
                res[len(dry_vines) * j + i] = 0
    return res


# Class for individual plants in the vineyard.
class Plant(object):
    def __init__(self, position, init_soil_moisture, health, leaf_positions):
        # Set soil soil moisture dissipation rate of this plant independently
        # of other plants if in potted plants mode.
        if potted_plants_mode:
            self.dissipation_rate = np.random.uniform(0, 1)

        # Position of the plant in the field.
        self.position = position

        # Initialize local soil moisture.
        self.soil_moisture = init_soil_moisture

        self.health = health

        # Size of the leaves for plotting.
        self.leaf_size = 2

        # Number of leaves to add each time the plant grows.
        self.leaf_num = 10

        # When growing, leaf positions are sampled as a multivariate Gaussian
        # distribution with mean equal to the position of the plant and
        # covariance matrix proportional to this growth ratio.
        self.growth_ratio = np.array([[0.5, 0], [0, 0.8]])

        # Sample the initial leaf positions of the plants.
        self.leaf_positions = leaf_positions

        # Assign colors to each leaf for the visualization.
        self.color()

    # Simulate plant growth using the supplied irrigation rate and soil
    # moisture dissipation rate.
    def grow(self, irrigation_rate, dissipation_rate, noise):
        # First-order approximation of Richards equation.
        self.soil_moisture += irrigation_rate - dissipation_rate + np.random.normal(scale=noise)

        # New leaves are added if soil moisture is non-negative.
        if self.soil_moisture >= 0:
            new_leaves = np.random.multivariate_normal(self.position,
                                                       self.soil_moisture * self.growth_ratio,
                                                       self.leaf_num)
            self.leaf_positions = np.vstack((self.leaf_positions, new_leaves))
        # Soil moisture cannot be negative.
        else:
            self.soil_moisture = 0

        # Color the new leaves.
        self.color()

    # Assign colors to each of the leaves for the plant.
    def color(self):
        num_leaves = len(self.leaf_positions[:, 0])

        # We use shades of green for the leaves if soil moisture is positive.
        if self.soil_moisture > 0:
            colors = [0, 153 / 256.0, 0, 0.4] + np.random.uniform(-.2, .2, (num_leaves, 4)) + [-10 / 256.0, 0, 0, 0]
        # We use shades of yellow if the soil moisture is zero.
        else:
            colors = [148 / 256.0, 148 / 256.0, 20 / 256.0, 0.7] + np.random.uniform(-.1, .1, (num_leaves, 4))

        if self.health == 0:
            # 0.9 / 0 / 0
            idxs = np.random.choice(num_leaves, num_leaves // 2)
            colors[idxs] = [0.9, 0.2, 0, 0.7] + np.random.uniform(-.1, .1, (num_leaves // 2, 4))

        colors = colors.tolist()

        # Ensure that colors are between 0 and 1.
        self.colors = np.clip(colors, 0, 1)


# Class for a vineyard object, which consists of individual plants.
class Vineyard(object):
    def __init__(self, leaf_positions, dry_vines, ill_vines):
        # Create new Figure and an Axes which fills it.
        self.bounds = [[0, 100], [0, 100]]
        self.fig = plt.figure(figsize=(16, 16))
        gs = gridspec.GridSpec(1, 1)
        self.ax1 = plt.subplot(gs[0])
        self.ax1.set_aspect('equal')
        self.ax1.set_xlim(-10, self.bounds[0][1] + 10), self.ax1.set_xticks([])
        self.ax1.set_ylim(-10, self.bounds[1][1] + 10), self.ax1.set_yticks([])
        self.ax1.imshow(imread(os.path.join(prefix, SOIL_IMG_PATH)), extent=[-10, 110, -10, 110])

        # Initialize the plants on a grid
        nx, ny = (10, 20)
        x = np.linspace(0, self.bounds[0][1], nx)
        y = np.linspace(0, self.bounds[1][1], ny)
        xx, yy = np.meshgrid(x, y)

        # Positions of the individual plants in the field.
        self.vine_positions = np.vstack((xx.flatten(), yy.flatten())).T

        # Set local soil moisture dissipation rate for each individual plant.
        self.dissipation_rate = soil_variation(dry_vines)

        self.illness_rate = soil_variation(ill_vines)

        # Irrigation rate vector (one irrigation rate per plant).
        self.irrigation_rate = 0.5 * np.ones(self.vine_positions.shape[0])

        # Create each plant.
        self.vines = []
        for pos, leaf_pos, diss_rate, ill_rate in \
                zip(self.vine_positions, leaf_positions, self.dissipation_rate, self.illness_rate):
            self.vines.append(Plant(pos, diss_rate, ill_rate, leaf_pos))

        # Keep track of the current day.
        self.time = 0

    # Simulates plant growth over one day.
    def update(self):
        sizes = []
        moistures = []

        for ind, vine in enumerate(self.vines):
            # Get information for generating synthetic aerial image.
            if ind == 0:
                leafpositions = vine.leaf_positions
                colors = vine.colors
                vinepositions = vine.position
            else:
                leafpositions = np.vstack((leafpositions, vine.leaf_positions))
                colors = np.vstack((colors, vine.colors))
                vinepositions = np.vstack((vinepositions, vine.position))

            sizes.append(vine.leaf_size)
            moistures.append(vine.soil_moisture)

        # Create synthetic aerial image.
        scat1 = self.ax1.scatter(leafpositions[:, 0], leafpositions[:, 1],
                                 s=sizes, edgecolors=colors,
                                 facecolors=colors)

        # Increment the timestep.
        self.time += 1
